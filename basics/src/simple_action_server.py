#!/usr/bin/env python
import rospy

import time # time.time() method
import actionlib # provides SimpleActionServer class
from basics.msg import TimerAction, TimerGoal, TimerResult # message classes 
                                        #autogenerated from Timer.action file

def do_timer(goal): #called everytime we get a new goal
    start_time = time.time() # save current time
    time.sleep(goal.time_to_wait.to_sec()) # sleep for a goal amount of time
    result = TimerResult() 
    result.time_elapsed = rospy.Duration.from_sec(time.time() - start_time) # compute how much time has passed
    result.updates_sent = 0 # placeholder for now
    server.set_succeeded(result) # always pass a success

rospy.init_node('timer_action_server') #init a node 
server = actionlib.SimpleActionServer('timer', TimerAction, do_timer, False) #(name, action-definition file, callback, don't auto-start this server)
server.start() #now start
rospy.spin()